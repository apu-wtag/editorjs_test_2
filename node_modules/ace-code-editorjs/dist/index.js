var c = Object.defineProperty;
var g = (i, t, e) => t in i ? c(i, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : i[t] = e;
var s = (i, t, e) => (g(i, typeof t != "symbol" ? t + "" : t, e), e);
import u from "ace-builds";
const h = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 8L5 12L9 16"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 8L19 12L15 16"/></svg>', p = {
  plain: {
    mode: "ace/mode/plain_text",
    label: "Plain Text"
  }
};
class w {
  constructor(t) {
    s(this, "api");
    s(this, "readOnly");
    s(this, "nodes");
    s(this, "ace");
    s(this, "_data");
    s(this, "config");
    const { data: e, api: a, config: l, readOnly: n } = t;
    this.api = a, this.readOnly = !!n, this.config = {
      languages: p,
      ...l
    }, this._data = {
      code: (e == null ? void 0 : e.code) || "",
      language: (e == null ? void 0 : e.language) || "plain"
    }, this.nodes = this.drawView();
  }
  static get isReadOnlySupported() {
    return !0;
  }
  static get enableLineBreaks() {
    return !0;
  }
  drawView() {
    var l;
    const t = document.createElement("div"), e = document.createElement("div");
    e.style.marginTop = "10px", this.ace = u.edit(e, {
      maxLines: 1 / 0,
      ...this.config.options,
      readOnly: this.readOnly,
      value: this.data.code,
      mode: this.data.language ? (l = this.config.languages[this.data.language]) == null ? void 0 : l.mode : void 0
    });
    const a = document.createElement("select");
    for (const n in this.config.languages)
      if (Object.prototype.hasOwnProperty.call(this.config.languages, n)) {
        const d = this.config.languages[n];
        let o = document.createElement("option");
        o.value = n, o.text = d.label, a.appendChild(o);
      }
    return a.classList.add(this.api.styles.input), a.value = this.data.language, a.onchange = (n) => {
      var o, r;
      let d = n.target.value;
      this._data.language = d, (r = this.ace) == null || r.session.setMode((o = this.config.languages[d]) == null ? void 0 : o.mode);
    }, this.readOnly && (a.disabled = !0), t.classList.add(this.api.styles.block), t.appendChild(a), t.appendChild(e), {
      holder: t,
      select: a
    };
  }
  render() {
    return this.nodes.holder;
  }
  save(t) {
    var e;
    return {
      code: (e = this.ace) == null ? void 0 : e.getValue(),
      language: this.data.language
    };
  }
  onPaste(t) {
    var a;
    const e = t.detail.data;
    this._data.code = e.textContent, (a = this.ace) == null || a.setValue(e.textContent);
  }
  get data() {
    return this._data;
  }
  set data(t) {
    var e, a;
    this._data = t, this.ace && this.ace.setValue(t.code), this.nodes.select && (this.nodes.select.value = t.language, (a = this.ace) == null || a.session.setMode((e = this.config.languages[t.language]) == null ? void 0 : e.mode));
  }
  static get toolbox() {
    return {
      icon: h,
      title: "Ace Code"
    };
  }
  static get pasteConfig() {
    return {
      tags: ["pre"]
    };
  }
  static get sanitize() {
    return {
      code: !0
    };
  }
}
export {
  w as default
};
