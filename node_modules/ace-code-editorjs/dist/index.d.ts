import { default as ace } from 'ace-builds';
import { BlockToolConstructorOptions, BlockTool } from '@editorjs/editorjs';

export interface AceCodeData {
    code: string;
    language: string;
}
interface AceCodeLanguages {
    [key: string]: {
        mode: string;
        label: string;
    };
}
export interface AceCodeConfig {
    options?: Partial<Omit<ace.Ace.EditorOptions, "readOnly" | "value" | "mode">>;
    languages: AceCodeLanguages;
}
type AceCodeEditorConfig = BlockToolConstructorOptions<AceCodeData, Partial<AceCodeConfig>>;
declare class AceCodeEditorJS implements BlockTool {
    private readonly api;
    private readonly readOnly;
    private readonly nodes;
    private ace;
    private _data;
    private readonly config;
    static get isReadOnlySupported(): boolean;
    static get enableLineBreaks(): boolean;
    constructor(config: Pick<Partial<AceCodeEditorConfig>, "data" | "readOnly"> & Omit<AceCodeEditorConfig, "data" | "readOnly">);
    drawView(): {
        holder: HTMLDivElement;
        select: HTMLSelectElement;
    };
    render(): HTMLDivElement;
    save(_: HTMLDivElement): {
        code: string | undefined;
        language: string;
    };
    onPaste(event: CustomEvent): void;
    get data(): AceCodeData;
    set data(data: AceCodeData);
    static get toolbox(): {
        icon: string;
        title: string;
    };
    static get pasteConfig(): {
        tags: string[];
    };
    static get sanitize(): {
        code: boolean;
    };
}
export default AceCodeEditorJS;
